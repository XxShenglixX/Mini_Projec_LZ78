Report 3

Objective: To toggle a LED on PIC24 by using interrupt method

Apparatus and Materials: PIC24 Development Board, ICD3

Source Code:	 #include<p24fj256da210.h>
#define LED1 LATEbits.LATE9
void init();
void _ISR _INT1Interrupt(void);
void main()
{
//Set up External Interrupt
RPINR0 = 0x1300; //Assign RP19 to INT1 (RG8)
init();
while(1);	//wait for interrupt to occur
}
void init()
{
TRISGbits.TRISG8 = 1;
TRISBbits.TRISB5 = 0;
TRISAbits.TRISA7 = 0;
TRISEbits.TRISE9 = 0;
ANSG = 0; //Port G as digital
INTCON1bits.NSTDIS = 0; //Interrupt nesting disable
INTCON2bits.ALTIVT = 0; //Use standard vector table
INTCON2bits.INT1EP = 0; //Interrupt on positive edge
IFS1bits.INT1IF = 0; //Clear INT1 flag
IEC1bits.INT1IE = 1; //Enable INT1
}
//INT1 interrupt service routine (ISR).
void __attribute__((__interrupt__, auto_psv)) _INT1Interrupt(void)
{
LED1 = ~LED1;
IFS1bits.INT1IF = 0; //Clear INT1 flag
}


Discussion: 		To use the RG8 as input switch and RE9 as LED output, as we have 
discussed in report 1 and report 2, we need to configure the jumper 
correctly or else it will not be working correctly. The input button is 
pulled up when not in used, and pull down when the button is pressed. 
One important thing in this practical is when we dealing with interrupt we 
must carefully initialize all the relevant pins correctly, like interrupt 
enable pins, and the pins in INTCON register because one bit configure 
wrongly will cause the whole program to failed. All the bits must be 
configure correctly by referring to the datasheet. 	

Conclusion : 	In conclusion, LEDs are able to toggle on and off whenever switch is 
			press and unpress.


